// Generated from /home/nick/workspaces/tslk/TSLK/src-gen/org/ng200/tslk/lang/TSLKGrammar.g4 by ANTLR 4.0
package org.ng200.tslk.lang;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class TSLKGrammarLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		NUMBER=1, FUNC=2, FOR=3, WHILE=4, IF=5, ELSE=6, THEN=7, DO=8, END=9, OR=10, 
		AND=11, LOCAL=12, TABLE=13, RETURN=14, BREAK=15, CONTINUE=16, TRUE=17, 
		FALSE=18, PLUSEQ=19, MINUSEQ=20, MULEQ=21, DIVEQ=22, REMEQ=23, POWEQ=24, 
		LESSEQ=25, LESS=26, MOREEQ=27, MORE=28, EQEQ=29, EQ=30, NOTEQ=31, PLUS=32, 
		MINUS=33, MUL=34, DIV=35, REM=36, NOT=37, LEN=38, POW=39, DOT=40, COMMA=41, 
		SEMI=42, COLON=43, LPAREN=44, RPAREN=45, LBRACKET=46, RBRACKET=47, LBRACE=48, 
		RBRACE=49, STRING=50, SLCOMMENT=51, MLCOMMENT=52, WS=53, GENERAL_ID=54;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"NUMBER", "'function'", "'for'", "'while'", "'if'", "'else'", "'then'", 
		"'do'", "'end'", "'or'", "'and'", "'local'", "'table'", "'return'", "'break'", 
		"'continue'", "'true'", "'false'", "'+='", "'-='", "'*='", "'/='", "'%='", 
		"'^='", "'<='", "'<'", "'>='", "'>'", "'=='", "'='", "'!='", "'+'", "'-'", 
		"'*'", "'/'", "'%'", "'not'", "'#'", "'^'", "'.'", "','", "';'", "':'", 
		"'('", "')'", "'['", "']'", "'{'", "'}'", "STRING", "SLCOMMENT", "MLCOMMENT", 
		"WS", "GENERAL_ID"
	};
	public static final String[] ruleNames = {
		"NUMBER", "FUNC", "FOR", "WHILE", "IF", "ELSE", "THEN", "DO", "END", "OR", 
		"AND", "LOCAL", "TABLE", "RETURN", "BREAK", "CONTINUE", "TRUE", "FALSE", 
		"PLUSEQ", "MINUSEQ", "MULEQ", "DIVEQ", "REMEQ", "POWEQ", "LESSEQ", "LESS", 
		"MOREEQ", "MORE", "EQEQ", "EQ", "NOTEQ", "PLUS", "MINUS", "MUL", "DIV", 
		"REM", "NOT", "LEN", "POW", "DOT", "COMMA", "SEMI", "COLON", "LPAREN", 
		"RPAREN", "LBRACKET", "RBRACKET", "LBRACE", "RBRACE", "STRING", "ESC", 
		"DIGIT", "HEXDIGIT", "XID_Start", "XID_Continue", "SLCOMMENT", "MLCOMMENT", 
		"WS", "GENERAL_ID"
	};


	public TSLKGrammarLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "TSLKGrammar.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	@Override
	public void action(RuleContext _localctx, int ruleIndex, int actionIndex) {
		switch (ruleIndex) {
		case 55: SLCOMMENT_action((RuleContext)_localctx, actionIndex); break;

		case 56: MLCOMMENT_action((RuleContext)_localctx, actionIndex); break;

		case 57: WS_action((RuleContext)_localctx, actionIndex); break;
		}
	}
	private void SLCOMMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 0: skip();  break;
		}
	}
	private void WS_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 2: skip();  break;
		}
	}
	private void MLCOMMENT_action(RuleContext _localctx, int actionIndex) {
		switch (actionIndex) {
		case 1: skip();  break;
		}
	}

	public static final String _serializedATN =
		"\2\48\u017a\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t"+
		"\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20"+
		"\t\20\4\21\t\21\4\22\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27"+
		"\t\27\4\30\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36"+
		"\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4"+
		"(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62"+
		"\t\62\4\63\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4"+
		":\t:\4;\t;\4<\t<\3\2\6\2{\n\2\r\2\16\2|\3\2\3\2\6\2\u0081\n\2\r\2\16\2"+
		"\u0082\3\2\6\2\u0086\n\2\r\2\16\2\u0087\5\2\u008a\n\2\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3"+
		"\6\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\b\3\b\3\b\3\t\3\t\3\t\3\n\3\n\3\n\3\n"+
		"\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16"+
		"\3\16\3\16\3\16\3\17\3\17\3\17\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\22"+
		"\3\22\3\22\3\23\3\23\3\23\3\23\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25"+
		"\3\26\3\26\3\26\3\27\3\27\3\27\3\30\3\30\3\30\3\31\3\31\3\31\3\32\3\32"+
		"\3\32\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\36\3\36\3\36\3\37\3\37\3 \3"+
		" \3 \3!\3!\3\"\3\"\3#\3#\3$\3$\3%\3%\3&\3&\3&\3&\3\'\3\'\3(\3(\3)\3)\3"+
		"*\3*\3+\3+\3,\3,\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63"+
		"\3\63\3\63\7\63\u0134\n\63\f\63\16\63\u0137\13\63\3\63\3\63\3\64\3\64"+
		"\3\64\3\64\3\64\3\64\3\64\3\64\5\64\u0143\n\64\3\65\3\65\3\66\3\66\3\67"+
		"\3\67\38\38\58\u014d\n8\39\39\39\39\79\u0153\n9\f9\169\u0156\139\39\5"+
		"9\u0159\n9\39\39\39\39\3:\3:\3:\3:\7:\u0163\n:\f:\16:\u0166\13:\3:\3:"+
		"\3:\3:\3:\3;\6;\u016e\n;\r;\16;\u016f\3;\3;\3<\3<\7<\u0176\n<\f<\16<\u0179"+
		"\13<\4\u0154\u0164=\3\3\1\5\4\1\7\5\1\t\6\1\13\7\1\r\b\1\17\t\1\21\n\1"+
		"\23\13\1\25\f\1\27\r\1\31\16\1\33\17\1\35\20\1\37\21\1!\22\1#\23\1%\24"+
		"\1\'\25\1)\26\1+\27\1-\30\1/\31\1\61\32\1\63\33\1\65\34\1\67\35\19\36"+
		"\1;\37\1= \1?!\1A\"\1C#\1E$\1G%\1I&\1K\'\1M(\1O)\1Q*\1S+\1U,\1W-\1Y.\1"+
		"[/\1]\60\1_\61\1a\62\1c\63\1e\64\1g\2\1i\2\1k\2\1m\2\1o\2\1q\65\2s\66"+
		"\3u\67\4w8\1\3\2\7\4$$^^\4ppvv\5\62;CHch\5C\\aac|\5\13\f\17\17\"\"\u0181"+
		"\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2"+
		"\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2"+
		"\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2"+
		"\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2"+
		"\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3"+
		"\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2"+
		"\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2"+
		"U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3"+
		"\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3\2\2\2\2w\3\2\2"+
		"\2\3\u0089\3\2\2\2\5\u008b\3\2\2\2\7\u0094\3\2\2\2\t\u0098\3\2\2\2\13"+
		"\u009e\3\2\2\2\r\u00a1\3\2\2\2\17\u00a6\3\2\2\2\21\u00ab\3\2\2\2\23\u00ae"+
		"\3\2\2\2\25\u00b2\3\2\2\2\27\u00b5\3\2\2\2\31\u00b9\3\2\2\2\33\u00bf\3"+
		"\2\2\2\35\u00c5\3\2\2\2\37\u00cc\3\2\2\2!\u00d2\3\2\2\2#\u00db\3\2\2\2"+
		"%\u00e0\3\2\2\2\'\u00e6\3\2\2\2)\u00e9\3\2\2\2+\u00ec\3\2\2\2-\u00ef\3"+
		"\2\2\2/\u00f2\3\2\2\2\61\u00f5\3\2\2\2\63\u00f8\3\2\2\2\65\u00fb\3\2\2"+
		"\2\67\u00fd\3\2\2\29\u0100\3\2\2\2;\u0102\3\2\2\2=\u0105\3\2\2\2?\u0107"+
		"\3\2\2\2A\u010a\3\2\2\2C\u010c\3\2\2\2E\u010e\3\2\2\2G\u0110\3\2\2\2I"+
		"\u0112\3\2\2\2K\u0114\3\2\2\2M\u0118\3\2\2\2O\u011a\3\2\2\2Q\u011c\3\2"+
		"\2\2S\u011e\3\2\2\2U\u0120\3\2\2\2W\u0122\3\2\2\2Y\u0124\3\2\2\2[\u0126"+
		"\3\2\2\2]\u0128\3\2\2\2_\u012a\3\2\2\2a\u012c\3\2\2\2c\u012e\3\2\2\2e"+
		"\u0130\3\2\2\2g\u013a\3\2\2\2i\u0144\3\2\2\2k\u0146\3\2\2\2m\u0148\3\2"+
		"\2\2o\u014c\3\2\2\2q\u014e\3\2\2\2s\u015e\3\2\2\2u\u016d\3\2\2\2w\u0173"+
		"\3\2\2\2y{\5i\65\2zy\3\2\2\2{|\3\2\2\2|z\3\2\2\2|}\3\2\2\2}~\3\2\2\2~"+
		"\u0080\7\60\2\2\177\u0081\5i\65\2\u0080\177\3\2\2\2\u0081\u0082\3\2\2"+
		"\2\u0082\u0080\3\2\2\2\u0082\u0083\3\2\2\2\u0083\u008a\3\2\2\2\u0084\u0086"+
		"\5i\65\2\u0085\u0084\3\2\2\2\u0086\u0087\3\2\2\2\u0087\u0085\3\2\2\2\u0087"+
		"\u0088\3\2\2\2\u0088\u008a\3\2\2\2\u0089z\3\2\2\2\u0089\u0085\3\2\2\2"+
		"\u008a\4\3\2\2\2\u008b\u008c\7h\2\2\u008c\u008d\7w\2\2\u008d\u008e\7p"+
		"\2\2\u008e\u008f\7e\2\2\u008f\u0090\7v\2\2\u0090\u0091\7k\2\2\u0091\u0092"+
		"\7q\2\2\u0092\u0093\7p\2\2\u0093\6\3\2\2\2\u0094\u0095\7h\2\2\u0095\u0096"+
		"\7q\2\2\u0096\u0097\7t\2\2\u0097\b\3\2\2\2\u0098\u0099\7y\2\2\u0099\u009a"+
		"\7j\2\2\u009a\u009b\7k\2\2\u009b\u009c\7n\2\2\u009c\u009d\7g\2\2\u009d"+
		"\n\3\2\2\2\u009e\u009f\7k\2\2\u009f\u00a0\7h\2\2\u00a0\f\3\2\2\2\u00a1"+
		"\u00a2\7g\2\2\u00a2\u00a3\7n\2\2\u00a3\u00a4\7u\2\2\u00a4\u00a5\7g\2\2"+
		"\u00a5\16\3\2\2\2\u00a6\u00a7\7v\2\2\u00a7\u00a8\7j\2\2\u00a8\u00a9\7"+
		"g\2\2\u00a9\u00aa\7p\2\2\u00aa\20\3\2\2\2\u00ab\u00ac\7f\2\2\u00ac\u00ad"+
		"\7q\2\2\u00ad\22\3\2\2\2\u00ae\u00af\7g\2\2\u00af\u00b0\7p\2\2\u00b0\u00b1"+
		"\7f\2\2\u00b1\24\3\2\2\2\u00b2\u00b3\7q\2\2\u00b3\u00b4\7t\2\2\u00b4\26"+
		"\3\2\2\2\u00b5\u00b6\7c\2\2\u00b6\u00b7\7p\2\2\u00b7\u00b8\7f\2\2\u00b8"+
		"\30\3\2\2\2\u00b9\u00ba\7n\2\2\u00ba\u00bb\7q\2\2\u00bb\u00bc\7e\2\2\u00bc"+
		"\u00bd\7c\2\2\u00bd\u00be\7n\2\2\u00be\32\3\2\2\2\u00bf\u00c0\7v\2\2\u00c0"+
		"\u00c1\7c\2\2\u00c1\u00c2\7d\2\2\u00c2\u00c3\7n\2\2\u00c3\u00c4\7g\2\2"+
		"\u00c4\34\3\2\2\2\u00c5\u00c6\7t\2\2\u00c6\u00c7\7g\2\2\u00c7\u00c8\7"+
		"v\2\2\u00c8\u00c9\7w\2\2\u00c9\u00ca\7t\2\2\u00ca\u00cb\7p\2\2\u00cb\36"+
		"\3\2\2\2\u00cc\u00cd\7d\2\2\u00cd\u00ce\7t\2\2\u00ce\u00cf\7g\2\2\u00cf"+
		"\u00d0\7c\2\2\u00d0\u00d1\7m\2\2\u00d1 \3\2\2\2\u00d2\u00d3\7e\2\2\u00d3"+
		"\u00d4\7q\2\2\u00d4\u00d5\7p\2\2\u00d5\u00d6\7v\2\2\u00d6\u00d7\7k\2\2"+
		"\u00d7\u00d8\7p\2\2\u00d8\u00d9\7w\2\2\u00d9\u00da\7g\2\2\u00da\"\3\2"+
		"\2\2\u00db\u00dc\7v\2\2\u00dc\u00dd\7t\2\2\u00dd\u00de\7w\2\2\u00de\u00df"+
		"\7g\2\2\u00df$\3\2\2\2\u00e0\u00e1\7h\2\2\u00e1\u00e2\7c\2\2\u00e2\u00e3"+
		"\7n\2\2\u00e3\u00e4\7u\2\2\u00e4\u00e5\7g\2\2\u00e5&\3\2\2\2\u00e6\u00e7"+
		"\7-\2\2\u00e7\u00e8\7?\2\2\u00e8(\3\2\2\2\u00e9\u00ea\7/\2\2\u00ea\u00eb"+
		"\7?\2\2\u00eb*\3\2\2\2\u00ec\u00ed\7,\2\2\u00ed\u00ee\7?\2\2\u00ee,\3"+
		"\2\2\2\u00ef\u00f0\7\61\2\2\u00f0\u00f1\7?\2\2\u00f1.\3\2\2\2\u00f2\u00f3"+
		"\7\'\2\2\u00f3\u00f4\7?\2\2\u00f4\60\3\2\2\2\u00f5\u00f6\7`\2\2\u00f6"+
		"\u00f7\7?\2\2\u00f7\62\3\2\2\2\u00f8\u00f9\7>\2\2\u00f9\u00fa\7?\2\2\u00fa"+
		"\64\3\2\2\2\u00fb\u00fc\7>\2\2\u00fc\66\3\2\2\2\u00fd\u00fe\7@\2\2\u00fe"+
		"\u00ff\7?\2\2\u00ff8\3\2\2\2\u0100\u0101\7@\2\2\u0101:\3\2\2\2\u0102\u0103"+
		"\7?\2\2\u0103\u0104\7?\2\2\u0104<\3\2\2\2\u0105\u0106\7?\2\2\u0106>\3"+
		"\2\2\2\u0107\u0108\7#\2\2\u0108\u0109\7?\2\2\u0109@\3\2\2\2\u010a\u010b"+
		"\7-\2\2\u010bB\3\2\2\2\u010c\u010d\7/\2\2\u010dD\3\2\2\2\u010e\u010f\7"+
		",\2\2\u010fF\3\2\2\2\u0110\u0111\7\61\2\2\u0111H\3\2\2\2\u0112\u0113\7"+
		"\'\2\2\u0113J\3\2\2\2\u0114\u0115\7p\2\2\u0115\u0116\7q\2\2\u0116\u0117"+
		"\7v\2\2\u0117L\3\2\2\2\u0118\u0119\7%\2\2\u0119N\3\2\2\2\u011a\u011b\7"+
		"`\2\2\u011bP\3\2\2\2\u011c\u011d\7\60\2\2\u011dR\3\2\2\2\u011e\u011f\7"+
		".\2\2\u011fT\3\2\2\2\u0120\u0121\7=\2\2\u0121V\3\2\2\2\u0122\u0123\7<"+
		"\2\2\u0123X\3\2\2\2\u0124\u0125\7*\2\2\u0125Z\3\2\2\2\u0126\u0127\7+\2"+
		"\2\u0127\\\3\2\2\2\u0128\u0129\7]\2\2\u0129^\3\2\2\2\u012a\u012b\7_\2"+
		"\2\u012b`\3\2\2\2\u012c\u012d\7}\2\2\u012db\3\2\2\2\u012e\u012f\7\177"+
		"\2\2\u012fd\3\2\2\2\u0130\u0135\7$\2\2\u0131\u0134\5g\64\2\u0132\u0134"+
		"\n\2\2\2\u0133\u0131\3\2\2\2\u0133\u0132\3\2\2\2\u0134\u0137\3\2\2\2\u0135"+
		"\u0133\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0138\3\2\2\2\u0137\u0135\3\2"+
		"\2\2\u0138\u0139\7$\2\2\u0139f\3\2\2\2\u013a\u0142\7^\2\2\u013b\u0143"+
		"\t\3\2\2\u013c\u013d\7w\2\2\u013d\u013e\5k\66\2\u013e\u013f\5k\66\2\u013f"+
		"\u0140\5k\66\2\u0140\u0141\5k\66\2\u0141\u0143\3\2\2\2\u0142\u013b\3\2"+
		"\2\2\u0142\u013c\3\2\2\2\u0143h\3\2\2\2\u0144\u0145\4\62;\2\u0145j\3\2"+
		"\2\2\u0146\u0147\t\4\2\2\u0147l\3\2\2\2\u0148\u0149\t\5\2\2\u0149n\3\2"+
		"\2\2\u014a\u014d\5m\67\2\u014b\u014d\4\63;\2\u014c\u014a\3\2\2\2\u014c"+
		"\u014b\3\2\2\2\u014dp\3\2\2\2\u014e\u014f\7\61\2\2\u014f\u0150\7\61\2"+
		"\2\u0150\u0154\3\2\2\2\u0151\u0153\13\2\2\2\u0152\u0151\3\2\2\2\u0153"+
		"\u0156\3\2\2\2\u0154\u0155\3\2\2\2\u0154\u0152\3\2\2\2\u0155\u0158\3\2"+
		"\2\2\u0156\u0154\3\2\2\2\u0157\u0159\7\17\2\2\u0158\u0157\3\2\2\2\u0158"+
		"\u0159\3\2\2\2\u0159\u015a\3\2\2\2\u015a\u015b\7\f\2\2\u015b\u015c\3\2"+
		"\2\2\u015c\u015d\b9\2\2\u015dr\3\2\2\2\u015e\u015f\7\61\2\2\u015f\u0160"+
		"\7,\2\2\u0160\u0164\3\2\2\2\u0161\u0163\13\2\2\2\u0162\u0161\3\2\2\2\u0163"+
		"\u0166\3\2\2\2\u0164\u0165\3\2\2\2\u0164\u0162\3\2\2\2\u0165\u0167\3\2"+
		"\2\2\u0166\u0164\3\2\2\2\u0167\u0168\7,\2\2\u0168\u0169\7\61\2\2\u0169"+
		"\u016a\3\2\2\2\u016a\u016b\b:\3\2\u016bt\3\2\2\2\u016c\u016e\t\6\2\2\u016d"+
		"\u016c\3\2\2\2\u016e\u016f\3\2\2\2\u016f\u016d\3\2\2\2\u016f\u0170\3\2"+
		"\2\2\u0170\u0171\3\2\2\2\u0171\u0172\b;\4\2\u0172v\3\2\2\2\u0173\u0177"+
		"\5m\67\2\u0174\u0176\5o8\2\u0175\u0174\3\2\2\2\u0176\u0179\3\2\2\2\u0177"+
		"\u0175\3\2\2\2\u0177\u0178\3\2\2\2\u0178x\3\2\2\2\u0179\u0177\3\2\2\2"+
		"\20\2|\u0082\u0087\u0089\u0133\u0135\u0142\u014c\u0154\u0158\u0164\u016f"+
		"\u0177";
	public static final ATN _ATN =
		ATNSimulator.deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
	}
}